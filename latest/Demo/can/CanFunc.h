/****************************************Copyright (c)**************************************************
**                               广州周立功单片机发展有限公司
**                                     研    究    所
**                                        产品一部 
**                                 http://www.zlgmcu.com
**-----------------------------------------------------------文件信息--------------------------------------------------------------------------------
**	文   件  	名:	CANFUNC.H
** 	版  		本:	v1.0
** 	日		期:	2004年2月23日
**	描		述:	CAN模块功能操作函数定义头文件
********************************************************************************************************/
#ifndef	_CANFUNC_H_
#define	_CANFUNC_H_
//函数、变量定位方式定义
#ifndef		_CANFUNC_GLOBAL_
#define		CANFUNC_GLOBAL		extern
#else
#define		CANFUNC_GLOBAL	
#endif

//应用常量定义
CANFUNC_GLOBAL	const 	INT32U	USE_LOM_CAN[CAN_MAX_NUM];
CANFUNC_GLOBAL	const	INT32U	USE_EWL_CAN[CAN_MAX_NUM];
CANFUNC_GLOBAL	const 	INT32U	USE_INT_CAN[CAN_MAX_NUM];
CANFUNC_GLOBAL	const 	INT32U	USE_TPM_CAN[CAN_MAX_NUM]; 
CANFUNC_GLOBAL	const 	INT32U	USE_BTR_CAN[CAN_MAX_NUM]; 
CANFUNC_GLOBAL	const 	INT32U	USE_SLP_MOD_CAN[CAN_MAX_NUM];
/*
***********************************************************************************************************
**函数原型	:  	void	HwRstCAN (eCANNUM CanNum)
**参数说明	:  	CanNum		-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**返回值		:	无	
**说	明		:	本函数用于硬件复位CAN控制器，主要是CAN模块掉电，用于省电处理
************************************************************************************************************/
CANFUNC_GLOBAL	void		HwRstCAN(eCANNUM CanNum);
/*
***********************************************************************************************************
**函数原型	:  	void	HwEnCAN (eCANNUM CanNum)
**参数说明	:  	CanNum		-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**返回值		:	无	
**说	明		:	本函数用于硬件使能CAN控制器
************************************************************************************************************/
CANFUNC_GLOBAL	void		HwEnCAN(eCANNUM CanNum);

/*
***********************************************************************************************************
**函数原型	:  	INT32U	SoftRstCAN (eCANNUM CanNum)
**参数说明	:  	CanNum		-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**返回值		:	＝0，表示复位成功； ！＝0，复位不成功；	
**说	明		:	本函数用于软件复位CAN控制器
************************************************************************************************************/
CANFUNC_GLOBAL	INT32U		SoftRstCAN(eCANNUM CanNum);
/*
***********************************************************************************************************
**函数原型	:  	INT32U	SoftEnCAN (eCANNUM CanNum)
**参数说明	:  	CanNum		-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**返回值		:	＝0，表示成功使CAN控制器进入工作模式； ！＝0，不成功；	
**说	明		:	本函数用于软件使能CAN控制器
************************************************************************************************************/
CANFUNC_GLOBAL	INT32U		SoftEnCAN(eCANNUM CanNum);
/*
***********************************************************************************************************
**函数原型		:  	SetCANBaudRate (eCANNUM CanNum,INT32U Val)
**参数说明		:  	CanNum	-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
				:	Val		-->>    总线定时器值	
**返回值		:	＝0，表示成功使CAN控制器设置波特率； ！＝0，不成功；	
**说	明		:	本函数用于设置CAN的波特率
************************************************************************************************************/
CANFUNC_GLOBAL	INT32U		SetCANBaudRate (eCANNUM CanNum,INT32U Val);
/*
***********************************************************************************************************
**函数原型		:  	SetErWarmVal (eCANNUM CanNum)
**参数说明		:  	CanNum	-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**				:	Val		-->>	错误警告寄存器的设定值
**返回值		:	＝0，表示成功使CAN控制器错误警告寄存器； ！＝0，不成功；	
**说	明		:	本函数用于设置CAN的错误警告寄存器(只有在RM ＝ 1时才可写入)
************************************************************************************************************/
INT32U		SetErWarmVal (const eCANNUM CanNum, INT32U Val);
/*
***********************************************************************************************************
**函数原型		:  	SetTPMMOD	 (eCANNUM CanNum)
**参数说明		:  	CanNum	-->> CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**				:	Val     -->> 0:各自的CAN ID决定;1:由发送缓冲区的优先级域决定
**返回值		:	＝0，表示成功设置CAN的发送优先级模式位； ！＝0，不成功；	
**说	明		:	本函数用于设置CAN的发送优先级模式
************************************************************************************************************/
INT32U		SetTPMMOD	 (eCANNUM CanNum, INT32U Val);
/*
***********************************************************************************************************
**函数原型		:  	INT32U		SetLOMMOD	 (eCANNUM CanNum)
**参数说明		:  	CanNum		-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**				:	Val			-->>    只听模式选择 0;正常，1:只听
**返回值		:	＝0，表示成功设置CAN的只听模式； ！＝0，不成功；	
**说	明		:	本函数用于设置CAN只听模式(只有在RM ＝ 1时才可写入)
************************************************************************************************************/
INT32U		SetLOMMOD	 (eCANNUM CanNum, INT32U Val);
/*
***********************************************************************************************************
**函数原型		:  	void	CanSendCmd(eCANNUM CanNum,INT32U Cmd,INT32U TxBuf)
**参数说明		:  	CanNum		-->> CAN控制器，值不能大于CAN_MAX_NUM 规定的值
					Cmd	-->> 发送命令字:1--单次发送,2--自发自收,3--单次自发自收,0--正常发送
					TxBuf	-->> 选择发送缓冲区
**返回值		:		
**说	明		:	本函数用于发送命令处理
************************************************************************************************************/
#define	NOM	0
#define	SIG	1
#define	SLF	2
#define	SSR	3
#define	TX_BUF1	1
#define	TX_BUF2	2
#define	TX_BUF3	4
CANFUNC_GLOBAL	void	CanSendCmd(eCANNUM CanNum,INT32U Cmd,INT32U TxBufNum);
/*
***********************************************************************************************************
**函数原型		:  	void	RelCanRecBuf(eCANNUM CanNum)
**参数说明		:  	CanNum		-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**返回值		:		
**说	明		:	本函数用于释放接收缓冲区
************************************************************************************************************/
CANFUNC_GLOBAL	void	RelCanRecBuf(eCANNUM CanNum);
/*
***********************************************************************************************************
**函数原型	:  	void	ClrCanDataOver(eCANNUM CanNum)
**参数说明	:  	CanNum		-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**返回值		:		
**说	明		:	本函数用于清除数据溢出
************************************************************************************************************/
CANFUNC_GLOBAL	void	ClrCanDataOver(eCANNUM CanNum);											
/*
***********************************************************************************************************
**函数原型		:  	INT32U 	CanEntrySM(CanNum)
**参数说明		:  	CanNum	-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**返回值		:	=0;成功进入睡眠状态;
					!=0;不能进入睡眠状态;	
**说	明		:	本函数用于使CAN控制器进入休眠模式
***********************************************************************************************************
*/
CANFUNC_GLOBAL	INT32U	CanEntrySM(eCANNUM	CanNum);
/*
***********************************************************************************************************
**函数原型	:  	INT32U CanQuitSM(eCANNUM	CanNum)
**参数说明	:  	CanNum		-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**返回值		:	=0;成功退出睡眠状态;
				!=0;不能退出睡眠状态;	
**说	明		:	本函数用于使CAN控制器退出休眠模式
***********************************************************************************************************
*/
CANFUNC_GLOBAL	INT32U CanQuitSM(eCANNUM CanNum);
/*
***********************************************************************************************************
**函数原型		:  	宏定义函数 CanBufOffLinePrg(CanNum)
**参数说明		:  	CanNum		-->>	CAN控制器，值不能大于CAN_MAX_NUM 规定的值
**返回值		:	无	
**说	明		:	本函数用于CAN控制器出现总线关闭错误处理
***********************************************************************************************************
*/
#define	CanBufOffLinePrg(CanNum)	if(CANMOD(CanNum).Bits.RM != 0)		\
									{										\
										CANGSR(CanNum).Word=0;				\
										CANMOD(CanNum).Bits.RM=0x00;	\
										CANCMR(CanNum).Word=0x02;			\
									}

/****************************************************************************
*****************************************************************************
******************************************************************************/
/*
*************************************************
			验收过滤寄存器专用函数
*************************************************
*/
/*
*********************************************************************
**	LUTERR寄存器的错误枚举
*********************************************************************
*/
enum LUT_BUILD_ERR
{
	LUT_SETTING_OK 			= 0,
	TOTAL_SIZE_TOO_LARGE 	= 1,
	FCAN_SIZE_TOO_LARGE		= 2,
	EFF_GRP_SIZE_INVALID	= 3,
	FCAN_STORE_SIZE_INVALID = 4,
	TABLE_CELL_TOO_LARGE	= 5,
	CELL_NUM_INVALID		= 6,
	CELL_CONTENT_INVALID	= 7
};
/*
*********************************************************************
**	验收过滤控制器的模式枚举
*********************************************************************
*/
enum AFMode
{
	Bypass = 1,
	Normal,
	FullCAN,
	Ignored
};
/*
************************************************************************************************************
**函数原型	:	INT32U AFBuildLUT (INT32U FCAN_nCell,
**								   INT32U SFF_INDV_nCell,
**								   INT32U SFF_GRP_nCell,
**								   INT32U EFF_INDV_nCell,
**								   INT32U EFF_GRP_nCell)
**参数说明	:	FCAN_nCell_Num -->>	FullCAN标准帧滤波单元个数
**				SFF_INDV_nCell_Num -->>	单个标准帧滤波单元个数
**				SFF_GRP_nCell_Num -->>	标准帧范围滤波单元个数
**				EFF_INDV_nCell_Num -->> 单个扩展帧滤波单元个数
**				EFF_GRP_nCell_Num -->>	扩展帧范围滤波单元个数
**
**返回值	:   LUT_SETTING_OK 			= 0,
**				TOTAL_SIZE_TOO_LARGE 	= 1,
**				EFF_GRP_SIZE_INVALID	= 3,
**				FCAN_STORE_SIZE_INVALID = 4,
**
**说明		:	验收过滤寄存器的初始化函数
************************************************************************************************************
*/
CANFUNC_GLOBAL	 INT32U AFBuildLUT( INT32U FCAN_nCell_Num,
									INT32U SFF_INDV_nCell_Num,
									INT32U SFF_GRP_nCell_Num,
									INT32U EFF_INDV_nCell_Num,
									INT32U EFF_GRP_nCell_Num);
/*
*********************************************************************************************************
**函数原型	;	void AFSetMode(INT32U mode)
**参数说明	;	mode -->> 验收过滤控制器的模式
**							Bypass =  1
**							normal =  2
**							fullCAN = 3
**							Ignored = 4
**返回值	:	
**
**说明		:	验收控制寄存器的设置函数						  
*********************************************************************************************************
*/
CANFUNC_GLOBAL	void AFSetMode(INT32U mode);
/*
*********************************************************************************************************
**函数原型	;	INT32U AFInitFCANTab(stcAF_SFF_CELL *pTab,INT32U nCell)
**参数说明	;	pTab -->>	FullCAN 标准帧ID结构数组
**			:	nCell -->>	Cell的个数
**
**返回值	:	LUT_SETTING_OK 			= 0,
**				TABLE_CELL_TOO_LARGE	= 5,
**
**说明		:	FullCAN标准帧表格的初始化
*********************************************************************************************************
*/
CANFUNC_GLOBAL	INT32U AFInitFCANTab(stcAF_SFF_CELL *pTab,INT32U nCell);
/*
*********************************************************************************************************
**函数原型	;	INT32U AFInitSFFIndvTab(stcAF_SFF_CELL *pTab,INT32U nCell)
**参数说明	;	pTab -->>	标准帧ID结构数组
**			:	nCell -->>	Cell的个数
**
**返回值	:	LUT_SETTING_OK 	= 0,
**				TABLE_CELL_TOO_LARGE	= 5,
**
**说明		:	单独标准帧表格的初始化
*********************************************************************************************************
*/
CANFUNC_GLOBAL	INT32U AFInitSFFIndvTab(stcAF_SFF_CELL *pTab,INT32U nCell);
/*
*********************************************************************************************************
**函数原型	;	INT32U AFInitSFFGrpTab(_AF_SFF_CELL *pTab,UINT32 nCell)
**参数说明	;	pTab -->>	标准帧ID结构数组
**			:	nCell -->>	Cell的个数
**
**返回值	:	LUT_SETTING_OK 	= 0,
**				TABLE_CELL_TOO_LARGE	= 5,
**
**说明		:	标准帧范围表格的初始化
*********************************************************************************************************
*/
CANFUNC_GLOBAL	INT32U AFInitSFFGrpTab(stcAF_SFF_CELL *pTab,INT32U nCell);
/*
*********************************************************************************************************
**函数原型	;	INT32U AFInitEFFIndvTab(stcAF_EFF_CELL *pTab,INT32U nCell)
**参数说明	;	pTab -->>	扩展帧ID结构数组
**			:	nCell -->>	Cell的个数
**
**返回值	:	LUT_SETTING_OK 	= 0,
**				TABLE_CELL_TOO_LARGE	= 5,
**
**说明		:	单独扩展帧表格的初始化
*********************************************************************************************************
*/
CANFUNC_GLOBAL	INT32U AFInitEFFIndvTab(stcAF_EFF_CELL *pTab,INT32U nCell);
/*
*********************************************************************************************************
**函数原型	;	INT32U AFInitEFFGrpTab(stcAF_EFF_CELL *pTab,INT32U nCell)
**参数说明	;	pTab -->>	扩展帧ID结构数组
**			:	nCell -->>	Cell的个数
**
**返回值	:	LUT_SETTING_OK 	= 0,
**				TABLE_CELL_TOO_LARGE	= 5,
**				CELL_NUM_INVALID		= 6,
**
**说明		:	扩展帧范围表格的初始化
*********************************************************************************************************
*/
CANFUNC_GLOBAL	INT32U AFInitEFFGrpTab(stcAF_EFF_CELL *pTab,INT32U nCell);
/*
*********************************************************************************************************
**函数原型	;	INT32U AFReadFCANRxResurt(_AF_AUTOSTORE_MSG *pMsg,UINT32 IdIndex)
**参数说明	;	pMsg -->>	FullCAN中自动保存的信息的ID结构
**			:	nCell -->>	FullCAN自动接收完毕后生成的索引
**返回值	:
**
**说明		:
*********************************************************************************************************
*/
CANFUNC_GLOBAL	INT32U AFReadFCANRxResurt(stcAF_AUTOSTORE_MSG *pMsg,INT32U IdIndex);
#endif
/*********************************************************************************************************
**                            End Of File
********************************************************************************************************/
