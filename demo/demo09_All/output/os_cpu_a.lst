


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 PRESERVE8
    3 00000000         
    4 00000000         
    5 00000000                 AREA             UCOS_ARM, CODE, READONLY
    6 00000000         
    7 00000000         ;*******************************************************
                       **************************************************
    8 00000000         ;                                          START MULTITA
                       SKING
    9 00000000         ;                                       void OSStartHigh
                       Rdy(void)
   10 00000000         ;
   11 00000000         ; Note : OSStartHighRdy() MUST:
   12 00000000         ;           a) Call OSTaskSwHook() then,
   13 00000000         ;           b) Set OSRunning to TRUE,
   14 00000000         ;           c) Switch to the highest priority task.
   15 00000000         ; ´Ëº¯ÊýÊÇÔÚosstart£¨£©¶àÈÎÎñÆô¶¯Ö®ºó£¬¸ºÔð´Ó×î¸ßÓÅÏÈ¼¶È
                       ÎÎñµÄtcb¿ØÖÆ¿éÖÐ»ñµÃ¸ÃÈÎÎñµÄ¶ÑÕ»Ö¸Õësp,
   16 00000000         ; Í¨¹ýsp ÒÀ´Î½«cpu ÏÖ³¡»Ö¸´£¬ÕâÊ±ÏµÍ³¾Í½«¿ØÖÆÈ¨½»¸øÓÃ»§´
                       ´½¨µÄ¸ÃÈÎÎñ½ø³Ì£¬ 
   17 00000000         ; Ö±µ½¸ÃÈÎÎñ±»×èÈû»òÕß±»ÆäËû¸ü¸ßÓÅÏÈ¼¶µÄÈÎÎñÇÀÕ¼cpu¡£ 
   18 00000000         ; ¸Ãº¯Êý½ö½öÔÚ¶àÈÎÎñÆô¶¯Ê±±»Ö´ÐÐÒ»´Î£¬ÓÃÀ´Æô¶¯µÚÒ»¸ö£¬Ò²
                       ¾ÍÊÇ×î¸ßÓÅÏÈ¼¶µÄÈÎÎñÖ´ÐÐ£¬ 
   19 00000000         ; Ö®ºó¶àÈÎÎñµÄµ÷¶ÈºÍÇÐ»»¾ÍÊÇÓÉÏÂÃæµÄº¯ÊýÀ´ÊµÏÖ¡£ 
   20 00000000         ;*******************************************************
                       **************************************************
   21 00000000         
   22 00000000                 IMPORT           OSTaskSwHook
   23 00000000                 IMPORT           OSRunning
   24 00000000                 IMPORT           OSTCBHighRdy
   25 00000000         
   26 00000000                 EXPORT           OSStartHighRdy
   27 00000000         
   28 00000000         OSStartHighRdy
   29 00000000         
   30 00000000 EBFFFFFE        bl               OSTaskSwHook ; Call user define
                                                            d task switch hook
   31 00000004         
   32 00000004 E59F4150        ldr              r4,=OSRunning ; Indicate that m
                                                            ultitasking has sta
                                                            rted
   33 00000008 E3A05001        mov              r5,#1
   34 0000000C E5C45000        strb             r5,[r4]
   35 00000010         
   36 00000010 E59F4148        ldr              r4,=OSTCBHighRdy ; Get highest 
                                                            priority task TCB a
                                                            ddress
   37 00000014         
   38 00000014 E5944000        ldr              r4,[r4]     ; get stack pointer
                                                            
   39 00000018 E594D000        ldr              sp,[r4]     ; switch to the new
                                                             stack
   40 0000001C         
   41 0000001C E8BD0010        ldmfd            sp!,{r4}    ; pop new task's sp
                                                            sr
   42 00000020 E16FF004        msr              SPSR_cxsf,r4
   43 00000024 E8BD0010        ldmfd            sp!,{r4}    ; pop new task's ps
                                                            r



ARM Macro Assembler    Page 2 


   44 00000028 E12FF004        msr              CPSR_cxsf,r4
   45 0000002C E8BDDFFF        ldmfd            sp!,{r0-r12,lr,pc} ; pop new ta
                                                            sk's r0-r12,lr & pc
                                                            
   46 00000030         
   47 00000030         ;*******************************************************
                       **************************************************
   48 00000030         ;                                PERFORM A CONTEXT SWITC
                       H (From task level)
   49 00000030         ;                                           void OSCtxSw
                       (void)
   50 00000030         ;
   51 00000030         ; Note(s):    Upon entry, 
   52 00000030         ;             OSTCBCur     points to the OS_TCB of the t
                       ask to suspend
   53 00000030         ;             OSTCBHighRdy points to the OS_TCB of the t
                       ask to resume
   54 00000030         ;
   55 00000030         ; ÈÎÎñ¼¶µÄÉÏÏÂÎÄÇÐ»»£¬ËüÊÇµ±ÈÎÎñÒòÎª±»×èÈû¶øÖ÷¶¯ÇëÇócpu 
                       µ÷¶ÈÊ±±»Ö´ÐÐ£¬ 
   56 00000030         ; ÓÉÓÚ´ËÊ±µÄÈÎÎñÇÐ»»¶¼ÊÇÔÚ·ÇÒì³£Ä£Ê½ÏÂ½øÐÐµÄ£¬Òò´ËÇø±ðÓÚ
                       ÖÐ¶Ï¼¶±ðµÄÈÎÎñÇÐ»»¡£   
   57 00000030         ; ËüµÄ¹¤×÷ÊÇÏÈ½«µ±Ç°ÈÎÎñµÄcpu ÏÖ³¡±£´æµ½¸ÃÈÎÎñ¶ÑÕ»ÖÐ£¬È»
                       ºó»ñµÃ×î¸ßÓÅÏÈ¼¶ÈÎÎñµÄ¶ÑÕ»Ö¸Õë£¬  
   58 00000030         ; ´Ó¸Ã¶ÑÕ»ÖÐ»Ö¸´´ËÈÎÎñµÄcpu ÏÖ³¡£¬Ê¹Ö®¼ÌÐøÖ´ÐÐ¡£ÕâÑù¾ÍÍê
                       ³ÉÁËÒ»´ÎÈÎÎñÇÐ»»¡£  
   59 00000030         ;*******************************************************
                       **************************************************
   60 00000030         
   61 00000030                 IMPORT           OSTCBCur
   62 00000030                 IMPORT           OSTaskSwHook
   63 00000030                 IMPORT           OSTCBHighRdy
   64 00000030                 IMPORT           OSPrioCur
   65 00000030                 IMPORT           OSPrioHighRdy
   66 00000030         
   67 00000030                 EXPORT           OSCtxSw
   68 00000030         
   69 00000030         OSCtxSw
   70 00000030         ; Special optimised code below:
   71 00000030 E92D4000        stmfd            sp!,{lr}    ; push pc (lr shoul
                                                            d be pushed in plac
                                                            e of PC)
   72 00000034 E92D5FFF        stmfd            sp!,{r0-r12,lr} ; push lr & reg
                                                            ister file
   73 00000038 E10F4000        mrs              r4,cpsr
   74 0000003C E92D0010        stmfd            sp!,{r4}    ; push current psr
   75 00000040 E14F4000        mrs              r4,spsr
   76 00000044 E92D0010        stmfd            sp!,{r4}    ; push current spsr
                                                            
   77 00000048         
   78 00000048         ; OSPrioCur = OSPrioHighRdy
   79 00000048 E59F4114        ldr              r4,=OSPrioCur
   80 0000004C E59F5114        ldr              r5,=OSPrioHighRdy
   81 00000050 E5D56000        ldrb             r6,[r5]
   82 00000054 E5C46000        strb             r6,[r4]
   83 00000058         
   84 00000058         ; Get current task TCB address
   85 00000058 E59F410C        ldr              r4,=OSTCBCur
   86 0000005C E5945000        ldr              r5,[r4]



ARM Macro Assembler    Page 3 


   87 00000060 E585D000        str              sp,[r5]     ; store sp in preem
                                                            pted tasks's TCB
   88 00000064         
   89 00000064 EBFFFFFE        bl               OSTaskSwHook ; call Task Switch
                                                             Hook
   90 00000068         
   91 00000068         ; Get highest priority task TCB address
   92 00000068 E59F60F0        ldr              r6,=OSTCBHighRdy
   93 0000006C E5966000        ldr              r6,[r6]
   94 00000070 E596D000        ldr              sp,[r6]     ; get new task's st
                                                            ack pointer
   95 00000074         
   96 00000074         ; OSTCBCur = OSTCBHighRdy
   97 00000074 E5846000        str              r6,[r4]     ; set new current t
                                                            ask TCB address
   98 00000078         
   99 00000078 E8BD0010        ldmfd            sp!,{r4}    ; pop new task's sp
                                                            sr
  100 0000007C E16FF004        msr              SPSR_cxsf,r4
  101 00000080 E8BD0010        ldmfd            sp!,{r4}    ; pop new task's ps
                                                            r
  102 00000084 E12FF004        msr              CPSR_cxsf,r4
  103 00000088 E8BDDFFF        ldmfd            sp!,{r0-r12,lr,pc} ; pop new ta
                                                            sk's r0-r12,lr & pc
                                                            
  104 0000008C         
  105 0000008C         
  106 0000008C         ;*******************************************************
                       **************************************************
  107 0000008C         ;                                PERFORM A CONTEXT SWITC
                       H (From an ISR)
  108 0000008C         ;                                        void OSIntCtxSw
                       (void)
  109 0000008C         ;
  110 0000008C         ; Note(s): This function only flags a context switch to 
                       the ISR Handler
  111 0000008C         ;
  112 0000008C         ; ÖÐ¶Ï¼¶µÄÈÎÎñÇÐ»»£¬ËüÊÇÔÚÊ±ÖÓÖÐ¶Ïisr£¨ÖÐ¶Ï·þÎñÀý³Ì£©ÖÐ·
                       ¢ÏÖÓÐ¸ßÓÅÏÈ¼¶ÈÎÎñµÈ´ýµÄÊ±ÖÓÐÅºÅµ½À´£¬   
  113 0000008C         ; ÔòÐèÒªÔÚÖÐ¶ÏÍË³öºó²¢²»·µ»Ø±»ÖÐ¶ÏÈÎÎñ£¬¶øÊÇÖ±½Óµ÷¶È¾ÍÐ÷
                       µÄ¸ßÓÅÏÈ¼¶ÈÎÎñÖ´ÐÐ¡£      
  114 0000008C         ; ÕâÑù×öµÄÄ¿µÄÖ÷ÒªÊÇÄÜ¹»¾¡¿ìµØÈÃ¸ßÓÅÏÈ¼¶µÄÈÎÎñµÃµ½ÏìÓ¦£¬
                       ±£Ö¤ÏµÍ³µÄÊµÊ±ÐÔÄÜ¡£    
  115 0000008C         ; ËüµÄÔ­Àí»ù±¾ÉÏÓëÈÎÎñ¼¶µÄÇÐ»»ÏàÍ¬£¬µ«ÊÇÓÉÓÚ½øÈëÖÐ¶ÏÊ±ÒÑ
                       ¾­±£´æ¹ýÁË±»ÖÐ¶ÏÈÎÎñµÄcpu ÏÖ³¡£¬  
  116 0000008C         ; Òò´ËÕâÀï¾Í²»ÓÃÔÙ½øÐÐÀàËÆµÄ²Ù×÷£¬Ö»ÐèÒª¶Ô¶ÑÕ»Ö¸Õë×öÏàÓ¦
                       µÄµ÷Õû£¬Ô­ÒòÊÇº¯ÊýµÄÇ¶Ì×¡£  
  117 0000008C         ;*******************************************************
                       **************************************************
  118 0000008C         
  119 0000008C                 IMPORT           OSIntCtxSwFlag
  120 0000008C         
  121 0000008C                 EXPORT           OSIntCtxSw
  122 0000008C         
  123 0000008C         OSIntCtxSw
  124 0000008C         
  125 0000008C         
  126 0000008C         ;OSIntCtxSwFlag = True
  127 0000008C E59F00DC        ldr              r0,=OSIntCtxSwFlag



ARM Macro Assembler    Page 4 


  128 00000090 E3A01001        mov              r1,#1
  129 00000094 E5801000        str              r1,[r0]
  130 00000098 E1A0F00E        mov              pc,lr
  131 0000009C         
  132 0000009C         
  133 0000009C         ;*******************************************************
                       **************************************************
  134 0000009C         ;                                            IRQ HANDLER
                       
  135 0000009C         ;
  136 0000009C         ;        This handles all the IRQs
  137 0000009C         ;        Note: FIQ Handler should be written similar to 
                       this
  138 0000009C         ;
  139 0000009C         ;*******************************************************
                       **************************************************
  140 0000009C                 IMPORT           OSIntEnter
  141 0000009C                 IMPORT           OSIntExit
  142 0000009C         
  143 0000009C                 IMPORT           OSIntCtxSwFlag
  144 0000009C                 IMPORT           OSTCBCur
  145 0000009C                 IMPORT           OSTaskSwHook
  146 0000009C                 IMPORT           OSTCBHighRdy
  147 0000009C                 IMPORT           OSPrioCur
  148 0000009C                 IMPORT           OSPrioHighRdy
  149 0000009C                 EXPORT           _IntCtxSw
  150 0000009C         
  151 0000009C 000000C0 
                       NOINT   EQU              0xc0
  152 0000009C         
  153 0000009C         
  154 0000009C         _IntCtxSw
  155 0000009C E3A01000        mov              r1,#0
  156 000000A0 E5801000        str              r1,[r0]
  157 000000A4         
  158 000000A4 E8BD500F        ldmfd            sp!,{r0-r3,r12,lr}
  159 000000A8 E92D000F        stmfd            sp!,{r0-r3}
  160 000000AC E1A0100D        mov              r1,sp
  161 000000B0 E28DD010        add              sp,sp,#16
  162 000000B4 E24E2004        sub              r2,lr,#4
  163 000000B8         
  164 000000B8 E14F3000        mrs              r3,spsr
  165 000000BC E38300C0        orr              r0,r3,#NOINT
  166 000000C0 E161F000        msr              spsr_c,r0
  167 000000C4         
  168 000000C4 E59F00A8        ldr              r0,=.+8
  169 000000C8 E1B0F000        movs             pc,r0
  170 000000CC         
  171 000000CC E92D0004        stmfd            sp!,{r2}    ; push old task's p
                                                            c
  172 000000D0 E92D5FF0        stmfd            sp!,{r4-r12,lr} ; push old task
                                                            's lr,r12-r4
  173 000000D4 E1A04001        mov              r4,r1       ; Special optimised
                                                             code below
  174 000000D8 E1A05003        mov              r5,r3
  175 000000DC E8B4000F        ldmfd            r4!,{r0-r3}
  176 000000E0 E92D000F        stmfd            sp!,{r0-r3} ; push old task's r
                                                            3-r0
  177 000000E4 E92D0020        stmfd            sp!,{r5}    ; push old task's p



ARM Macro Assembler    Page 5 


                                                            sr
  178 000000E8 E14F4000        mrs              r4,spsr
  179 000000EC E92D0010        stmfd            sp!,{r4}    ; push old task's s
                                                            psr
  180 000000F0         
  181 000000F0         ; OSPrioCur = OSPrioHighRdy
  182 000000F0 E59F406C        ldr              r4,=OSPrioCur
  183 000000F4 E59F506C        ldr              r5,=OSPrioHighRdy
  184 000000F8 E5D55000        ldrb             r5,[r5]
  185 000000FC E5C45000        strb             r5,[r4]
  186 00000100         
  187 00000100         ; Get current task TCB address
  188 00000100 E59F4064        ldr              r4,=OSTCBCur
  189 00000104 E5945000        ldr              r5,[r4]
  190 00000108 E585D000        str              sp,[r5]     ; store sp in preem
                                                            pted tasks's TCB
  191 0000010C         
  192 0000010C EBFFFFFE        bl               OSTaskSwHook ; call Task Switch
                                                             Hook
  193 00000110         
  194 00000110         ; Get highest priority task TCB address
  195 00000110 E59F6048        ldr              r6,=OSTCBHighRdy
  196 00000114 E5966000        ldr              r6,[r6]
  197 00000118 E596D000        ldr              sp,[r6]     ; get new task's st
                                                            ack pointer
  198 0000011C         
  199 0000011C         ; OSTCBCur = OSTCBHighRdy
  200 0000011C E5846000        str              r6,[r4]     ; set new current t
                                                            ask TCB address
  201 00000120         
  202 00000120 E8BD0010        ldmfd            sp!,{r4}    ; pop new task's sp
                                                            sr
  203 00000124 E16FF004        msr              SPSR_cxsf,r4
  204 00000128 E8BD0010        ldmfd            sp!,{r4}    ; pop new task's ps
                                                            r
  205 0000012C E12FF004        msr              CPSR_cxsf,r4
  206 00000130         
  207 00000130 E8BDDFFF        ldmfd            sp!,{r0-r12,lr,pc} ; pop new ta
                                                            sk's r0-r12,lr & pc
                                                            
  208 00000134         
  209 00000134         ;*******************************************************
                       **************************************************
  210 00000134         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
  211 00000134         ;
  212 00000134         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
  213 00000134         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
  214 00000134         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to 
  215 00000134         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
  216 00000134         ;              into the CPU's status register.
  217 00000134         ;
  218 00000134         ;              OS_CPU_SR OSCPUSaveSR()
  219 00000134         ; Arguments  : none
  220 00000134         ;



ARM Macro Assembler    Page 6 


  221 00000134         ; Returns    : OS_CPU_SR
  222 00000134         ;
  223 00000134         ;              OSCPURestoreSR(OS_CPU_SR cpu_sr)
  224 00000134         ; Arguments  : OS_CPU_SR
  225 00000134         ;
  226 00000134         ; Returns    : none
  227 00000134         ;
  228 00000134         ; Note(s)    : These functions are used in general like 
                       this,
  229 00000134         ;
  230 00000134         ;            void Task (void *data)
  231 00000134         ;            {
  232 00000134         ;                    #if OS_CRITICAL_METHOD == 3 /* Allo
                       cate storage for CPU status register */
  233 00000134         ;                          OS_CPU_SR  cpu_sr;
  234 00000134         ;                    #endif
  235 00000134         ;                         :
  236 00000134         ;                         :
  237 00000134         ;                    OS_ENTER_CRITICAL(); /* cpu_sr = OS
                       CPUSaveSR(); */
  238 00000134         ;                         :
  239 00000134         ;                         :
  240 00000134         ;                    OS_EXIT_CRITICAL();  /* OSCPURestor
                       eSR(cpu_sr); */
  241 00000134         ;                         :
  242 00000134         ;                         :
  243 00000134         ;            }
  244 00000134         ;*******************************************************
                       **************************************************
  245 00000134         
  246 00000134                 EXPORT           OSCPUSaveSR
  247 00000134         OSCPUSaveSR
  248 00000134         
  249 00000134 E10F0000        mrs              r0,CPSR
  250 00000138 E38010C0        orr              r1,r0,#NOINT
  251 0000013C E121F001        msr              CPSR_c,r1
  252 00000140 E10F1000        MRS              R1,CPSR     ; Confirm that CPSR
                                                             contains the prope
                                                            r interrupt disable
                                                             flags
  253 00000144 E20110C0        AND              R1,R1,#NOINT
  254 00000148 E35100C0        CMP              R1,#NOINT
  255 0000014C 1AFFFFFE        BNE              OSCPUSaveSR ; Not properly disa
                                                            bled (try again)
  256 00000150 E1A0F00E        mov              pc,lr
  257 00000154         
  258 00000154         
  259 00000154                 EXPORT           OSCPURestoreSR
  260 00000154         OSCPURestoreSR
  261 00000154         
  262 00000154 E121F000        msr              CPSR_c,r0
  263 00000158 E1A0F00E        mov              pc,lr
  264 0000015C         
  265 0000015C         
  266 0000015C                 END
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 7 


              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1608W --apcs=interwork --dep
end=.\output\os_cpu_a.d -o.\output\os_cpu_a.o -IE:\software\Keil\Keil_v5\ARM\RV
31\INC -IE:\software\Keil\Keil_v5\ARM\CMSIS\Include -IE:\software\Keil\Keil_v5\
ARM\INC\Philips --predefine="__UVISION_VERSION SETA 526" --list=.\output\os_cpu
_a.lst arm\os_cpu_a.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

OSCPURestoreSR 00000154

Symbol: OSCPURestoreSR
   Definitions
      At line 260 in file arm\os_cpu_a.s
   Uses
      At line 259 in file arm\os_cpu_a.s
Comment: OSCPURestoreSR used once
OSCPUSaveSR 00000134

Symbol: OSCPUSaveSR
   Definitions
      At line 247 in file arm\os_cpu_a.s
   Uses
      At line 246 in file arm\os_cpu_a.s
      At line 255 in file arm\os_cpu_a.s

OSCtxSw 00000030

Symbol: OSCtxSw
   Definitions
      At line 69 in file arm\os_cpu_a.s
   Uses
      At line 67 in file arm\os_cpu_a.s
Comment: OSCtxSw used once
OSIntCtxSw 0000008C

Symbol: OSIntCtxSw
   Definitions
      At line 123 in file arm\os_cpu_a.s
   Uses
      At line 121 in file arm\os_cpu_a.s
Comment: OSIntCtxSw used once
OSStartHighRdy 00000000

Symbol: OSStartHighRdy
   Definitions
      At line 28 in file arm\os_cpu_a.s
   Uses
      At line 26 in file arm\os_cpu_a.s
Comment: OSStartHighRdy used once
UCOS_ARM 00000000

Symbol: UCOS_ARM
   Definitions
      At line 5 in file arm\os_cpu_a.s
   Uses
      None
Comment: UCOS_ARM unused
_IntCtxSw 0000009C

Symbol: _IntCtxSw
   Definitions
      At line 154 in file arm\os_cpu_a.s
   Uses
      At line 149 in file arm\os_cpu_a.s
Comment: _IntCtxSw used once
|UCOS_ARM$$174| 000000CC




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: |UCOS_ARM$$174|
   Definitions
      None
   Uses
      None
Warning: |UCOS_ARM$$174| undefinedComment: |UCOS_ARM$$174| unused
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NOINT 000000C0

Symbol: NOINT
   Definitions
      At line 151 in file arm\os_cpu_a.s
   Uses
      At line 165 in file arm\os_cpu_a.s
      At line 250 in file arm\os_cpu_a.s
      At line 253 in file arm\os_cpu_a.s
      At line 254 in file arm\os_cpu_a.s

1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntCtxSwFlag 00000000

Symbol: OSIntCtxSwFlag
   Definitions
      At line 119 in file arm\os_cpu_a.s
      At line 143 in file arm\os_cpu_a.s
   Uses
      At line 127 in file arm\os_cpu_a.s
Warning: OSIntCtxSwFlag multiply definedComment: OSIntCtxSwFlag used once
OSIntEnter 00000000

Symbol: OSIntEnter
   Definitions
      At line 140 in file arm\os_cpu_a.s
   Uses
      None
Comment: OSIntEnter unused
OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 141 in file arm\os_cpu_a.s
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 64 in file arm\os_cpu_a.s
      At line 147 in file arm\os_cpu_a.s
   Uses
      At line 79 in file arm\os_cpu_a.s
      At line 182 in file arm\os_cpu_a.s
Warning: OSPrioCur multiply defined
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 65 in file arm\os_cpu_a.s
      At line 148 in file arm\os_cpu_a.s
   Uses
      At line 80 in file arm\os_cpu_a.s
      At line 183 in file arm\os_cpu_a.s
Warning: OSPrioHighRdy multiply defined
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 23 in file arm\os_cpu_a.s
   Uses
      At line 32 in file arm\os_cpu_a.s
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 61 in file arm\os_cpu_a.s
      At line 144 in file arm\os_cpu_a.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Uses
      At line 85 in file arm\os_cpu_a.s
      At line 188 in file arm\os_cpu_a.s
Warning: OSTCBCur multiply defined
OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 24 in file arm\os_cpu_a.s
      At line 63 in file arm\os_cpu_a.s
      At line 146 in file arm\os_cpu_a.s
   Uses
      At line 36 in file arm\os_cpu_a.s
      At line 92 in file arm\os_cpu_a.s
      At line 195 in file arm\os_cpu_a.s
Warning: OSTCBHighRdy multiply defined
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 22 in file arm\os_cpu_a.s
      At line 62 in file arm\os_cpu_a.s
      At line 145 in file arm\os_cpu_a.s
   Uses
      At line 30 in file arm\os_cpu_a.s
      At line 89 in file arm\os_cpu_a.s
      At line 192 in file arm\os_cpu_a.s
Warning: OSTaskSwHook multiply defined
9 symbols
351 symbols in table
