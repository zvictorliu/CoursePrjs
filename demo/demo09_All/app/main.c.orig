
#include "includes.h"
#include "OS_CPU.h"
#include "bsp.h"

#include "config.h"

#define		KEY_OK			(1 << 4 )
#define		KEY_ESC			(1 << 5 )
#define		KEY_DEC			(1 << 11)
#define		KEY_INC			(1 << 12)
#define		LED_AUTO		(1 << 16)

#define		TASK_STK_SIZE		128

OS_STK		TaskStartStk[TASK_STK_SIZE];
OS_STK		Task1Stk[TASK_STK_SIZE];

void TaskStart(void *data);
void Task1(void *data);

/* 分配任务的堆栈空间 */
OS_STK	Stack_I2C[128];
OS_STK	Stack_MID[128];
OS_STK	Stack_KEY[128];
OS_STK	Stack_LCD[128];

/* 定义任务之间通讯信号 */
OS_EVENT *SEM_UPDATE;
OS_EVENT *MBOX_KEYDN;

uint8 u8CntI2C= 0, u8CntMID= 0, u8CntKEY= 0, u8CntLCD= 0;
char  strKey[8] = {0};

/* 屏幕控制任务 */
void Task_LCD(void *pdata)
{
uint8 i= 0, err;
char str[8];
pdata= pdata;

LCD_SetMode(LCD_MODE_CLEAR); // 清屏

LCD_SetMode(LCD_MODE_HIDE);  // 先隐藏
LCD_DrawOut();               // 画图
LCD_SetMode(LCD_MODE_SHOW);  // 显现图

LCD_SetMode(LCD_MODE_TEXT);
LCD_TextOut(2, 0, "I2C:");
LCD_TextOut(2, 1, "MID:");
LCD_TextOut(2, 2, "KEY:");
LCD_TextOut(2, 3, "LCD:");

while(1)
{
OSSemPend(SEM_UPDATE, 0, &err); // 等待信号量

LCD_SetMode(LCD_MODE_TEXT);
LCD_TextOut(0, 0, strKey);

sprintf(str, " %-3d", u8CntI2C);
LCD_TextOut(4, 0, str);
sprintf(str, " %-3d", u8CntMID);
LCD_TextOut(4, 1, str);
sprintf(str, " %-3d", u8CntKEY);
LCD_TextOut(4, 2, str);
sprintf(str, " %-3d", u8CntLCD);
LCD_TextOut(4, 3, str);

if(++i>= 10) {
i= 0;
u8CntLCD++;
}

OSTimeDlyHMSM(0, 0, 0, 20);
}
}

void Task1(void *pdata)
{
pdata = pdata;

LCD_SetMode(LCD_MODE_CLEAR); // 清屏

LCD_SetMode(LCD_MODE_HIDE);  // 先隐藏
LCD_DrawOut();               // 画图
LCD_SetMode(LCD_MODE_SHOW);  // 显现图

LCD_SetMode(LCD_MODE_TEXT);
LCD_TextOut(2, 0, "I2C:");
LCD_TextOut(2, 1, "MID:");
LCD_TextOut(2, 2, "KEY:");
LCD_TextOut(2, 3, "LCD:");

for(;;) {
IO0SET= LED_AUTO;
OSTimeDly(5);
IO0CLR= LED_AUTO;
OSTimeDly(5);

I2C_FeedDog();
}
}

void TaskStart(void *pdata)
{
pdata = pdata;

BSP_init();

LCD_Init(); // LCD初始化
I2C_Init(); // I2C初始化

PINSEL0&= ~((3 << 8) | (3 << 10) | (3 << 22) | (3 << 24));
PINSEL1&= ~ (3 << 0);
IO0DIR |=   LED_AUTO;
IO0DIR &= ~(KEY_ESC | KEY_INC | KEY_DEC | KEY_OK);

OSTaskCreate(Task1, (void *)0, &Task1Stk[TASK_STK_SIZE - 1], 1);
OSTaskDel(0);
}

int main(void)
{
OSInit();
OSTaskCreate(TaskStart, (void *)0, &TaskStartStk[TASK_STK_SIZE - 1], 0);
OSStart();

return 0;
}
